# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from openrtk_msg/openrtk_ins.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class openrtk_ins(genpy.Message):
  _md5sum = "6e86b3ea1a214ea8b04a5d2a2447027c"
  _type = "openrtk_msg/openrtk_ins"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint16 gps_week
uint32 gps_millisecs
uint8 ins_status
uint8 ins_position_type
float64 latitude
float64 longitude
float64 height
float64 north_vel
float64 east_vel
float64 up_vel
float64 roll
float64 pitch
float64 heading
float32 latitude_std_deviation
float32 longitude_std_deviation
float32 height_std_deviation
float32 north_vel_std_deviation
float32 east_vel_std_deviation
float32 up_vel_std_deviation
float32 roll_std_deviation
float32 pitch_std_deviation
float32 heading_std_deviation

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','gps_week','gps_millisecs','ins_status','ins_position_type','latitude','longitude','height','north_vel','east_vel','up_vel','roll','pitch','heading','latitude_std_deviation','longitude_std_deviation','height_std_deviation','north_vel_std_deviation','east_vel_std_deviation','up_vel_std_deviation','roll_std_deviation','pitch_std_deviation','heading_std_deviation']
  _slot_types = ['std_msgs/Header','uint16','uint32','uint8','uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,gps_week,gps_millisecs,ins_status,ins_position_type,latitude,longitude,height,north_vel,east_vel,up_vel,roll,pitch,heading,latitude_std_deviation,longitude_std_deviation,height_std_deviation,north_vel_std_deviation,east_vel_std_deviation,up_vel_std_deviation,roll_std_deviation,pitch_std_deviation,heading_std_deviation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(openrtk_ins, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.gps_week is None:
        self.gps_week = 0
      if self.gps_millisecs is None:
        self.gps_millisecs = 0
      if self.ins_status is None:
        self.ins_status = 0
      if self.ins_position_type is None:
        self.ins_position_type = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.height is None:
        self.height = 0.
      if self.north_vel is None:
        self.north_vel = 0.
      if self.east_vel is None:
        self.east_vel = 0.
      if self.up_vel is None:
        self.up_vel = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.heading is None:
        self.heading = 0.
      if self.latitude_std_deviation is None:
        self.latitude_std_deviation = 0.
      if self.longitude_std_deviation is None:
        self.longitude_std_deviation = 0.
      if self.height_std_deviation is None:
        self.height_std_deviation = 0.
      if self.north_vel_std_deviation is None:
        self.north_vel_std_deviation = 0.
      if self.east_vel_std_deviation is None:
        self.east_vel_std_deviation = 0.
      if self.up_vel_std_deviation is None:
        self.up_vel_std_deviation = 0.
      if self.roll_std_deviation is None:
        self.roll_std_deviation = 0.
      if self.pitch_std_deviation is None:
        self.pitch_std_deviation = 0.
      if self.heading_std_deviation is None:
        self.heading_std_deviation = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.gps_week = 0
      self.gps_millisecs = 0
      self.ins_status = 0
      self.ins_position_type = 0
      self.latitude = 0.
      self.longitude = 0.
      self.height = 0.
      self.north_vel = 0.
      self.east_vel = 0.
      self.up_vel = 0.
      self.roll = 0.
      self.pitch = 0.
      self.heading = 0.
      self.latitude_std_deviation = 0.
      self.longitude_std_deviation = 0.
      self.height_std_deviation = 0.
      self.north_vel_std_deviation = 0.
      self.east_vel_std_deviation = 0.
      self.up_vel_std_deviation = 0.
      self.roll_std_deviation = 0.
      self.pitch_std_deviation = 0.
      self.heading_std_deviation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HI2B9d9f().pack(_x.gps_week, _x.gps_millisecs, _x.ins_status, _x.ins_position_type, _x.latitude, _x.longitude, _x.height, _x.north_vel, _x.east_vel, _x.up_vel, _x.roll, _x.pitch, _x.heading, _x.latitude_std_deviation, _x.longitude_std_deviation, _x.height_std_deviation, _x.north_vel_std_deviation, _x.east_vel_std_deviation, _x.up_vel_std_deviation, _x.roll_std_deviation, _x.pitch_std_deviation, _x.heading_std_deviation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 116
      (_x.gps_week, _x.gps_millisecs, _x.ins_status, _x.ins_position_type, _x.latitude, _x.longitude, _x.height, _x.north_vel, _x.east_vel, _x.up_vel, _x.roll, _x.pitch, _x.heading, _x.latitude_std_deviation, _x.longitude_std_deviation, _x.height_std_deviation, _x.north_vel_std_deviation, _x.east_vel_std_deviation, _x.up_vel_std_deviation, _x.roll_std_deviation, _x.pitch_std_deviation, _x.heading_std_deviation,) = _get_struct_HI2B9d9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HI2B9d9f().pack(_x.gps_week, _x.gps_millisecs, _x.ins_status, _x.ins_position_type, _x.latitude, _x.longitude, _x.height, _x.north_vel, _x.east_vel, _x.up_vel, _x.roll, _x.pitch, _x.heading, _x.latitude_std_deviation, _x.longitude_std_deviation, _x.height_std_deviation, _x.north_vel_std_deviation, _x.east_vel_std_deviation, _x.up_vel_std_deviation, _x.roll_std_deviation, _x.pitch_std_deviation, _x.heading_std_deviation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 116
      (_x.gps_week, _x.gps_millisecs, _x.ins_status, _x.ins_position_type, _x.latitude, _x.longitude, _x.height, _x.north_vel, _x.east_vel, _x.up_vel, _x.roll, _x.pitch, _x.heading, _x.latitude_std_deviation, _x.longitude_std_deviation, _x.height_std_deviation, _x.north_vel_std_deviation, _x.east_vel_std_deviation, _x.up_vel_std_deviation, _x.roll_std_deviation, _x.pitch_std_deviation, _x.heading_std_deviation,) = _get_struct_HI2B9d9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_HI2B9d9f = None
def _get_struct_HI2B9d9f():
    global _struct_HI2B9d9f
    if _struct_HI2B9d9f is None:
        _struct_HI2B9d9f = struct.Struct("<HI2B9d9f")
    return _struct_HI2B9d9f
