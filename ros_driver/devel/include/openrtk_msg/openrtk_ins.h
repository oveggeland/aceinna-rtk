// Generated by gencpp from file openrtk_msg/openrtk_ins.msg
// DO NOT EDIT!


#ifndef OPENRTK_MSG_MESSAGE_OPENRTK_INS_H
#define OPENRTK_MSG_MESSAGE_OPENRTK_INS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace openrtk_msg
{
template <class ContainerAllocator>
struct openrtk_ins_
{
  typedef openrtk_ins_<ContainerAllocator> Type;

  openrtk_ins_()
    : header()
    , gps_week(0)
    , gps_millisecs(0)
    , ins_status(0)
    , ins_position_type(0)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , north_vel(0.0)
    , east_vel(0.0)
    , up_vel(0.0)
    , roll(0.0)
    , pitch(0.0)
    , heading(0.0)
    , latitude_std_deviation(0.0)
    , longitude_std_deviation(0.0)
    , height_std_deviation(0.0)
    , north_vel_std_deviation(0.0)
    , east_vel_std_deviation(0.0)
    , up_vel_std_deviation(0.0)
    , roll_std_deviation(0.0)
    , pitch_std_deviation(0.0)
    , heading_std_deviation(0.0)  {
    }
  openrtk_ins_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gps_week(0)
    , gps_millisecs(0)
    , ins_status(0)
    , ins_position_type(0)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , north_vel(0.0)
    , east_vel(0.0)
    , up_vel(0.0)
    , roll(0.0)
    , pitch(0.0)
    , heading(0.0)
    , latitude_std_deviation(0.0)
    , longitude_std_deviation(0.0)
    , height_std_deviation(0.0)
    , north_vel_std_deviation(0.0)
    , east_vel_std_deviation(0.0)
    , up_vel_std_deviation(0.0)
    , roll_std_deviation(0.0)
    , pitch_std_deviation(0.0)
    , heading_std_deviation(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _gps_week_type;
  _gps_week_type gps_week;

   typedef uint32_t _gps_millisecs_type;
  _gps_millisecs_type gps_millisecs;

   typedef uint8_t _ins_status_type;
  _ins_status_type ins_status;

   typedef uint8_t _ins_position_type_type;
  _ins_position_type_type ins_position_type;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _height_type;
  _height_type height;

   typedef double _north_vel_type;
  _north_vel_type north_vel;

   typedef double _east_vel_type;
  _east_vel_type east_vel;

   typedef double _up_vel_type;
  _up_vel_type up_vel;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _heading_type;
  _heading_type heading;

   typedef float _latitude_std_deviation_type;
  _latitude_std_deviation_type latitude_std_deviation;

   typedef float _longitude_std_deviation_type;
  _longitude_std_deviation_type longitude_std_deviation;

   typedef float _height_std_deviation_type;
  _height_std_deviation_type height_std_deviation;

   typedef float _north_vel_std_deviation_type;
  _north_vel_std_deviation_type north_vel_std_deviation;

   typedef float _east_vel_std_deviation_type;
  _east_vel_std_deviation_type east_vel_std_deviation;

   typedef float _up_vel_std_deviation_type;
  _up_vel_std_deviation_type up_vel_std_deviation;

   typedef float _roll_std_deviation_type;
  _roll_std_deviation_type roll_std_deviation;

   typedef float _pitch_std_deviation_type;
  _pitch_std_deviation_type pitch_std_deviation;

   typedef float _heading_std_deviation_type;
  _heading_std_deviation_type heading_std_deviation;





  typedef boost::shared_ptr< ::openrtk_msg::openrtk_ins_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openrtk_msg::openrtk_ins_<ContainerAllocator> const> ConstPtr;

}; // struct openrtk_ins_

typedef ::openrtk_msg::openrtk_ins_<std::allocator<void> > openrtk_ins;

typedef boost::shared_ptr< ::openrtk_msg::openrtk_ins > openrtk_insPtr;
typedef boost::shared_ptr< ::openrtk_msg::openrtk_ins const> openrtk_insConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openrtk_msg::openrtk_ins_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openrtk_msg::openrtk_ins_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::openrtk_msg::openrtk_ins_<ContainerAllocator1> & lhs, const ::openrtk_msg::openrtk_ins_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gps_week == rhs.gps_week &&
    lhs.gps_millisecs == rhs.gps_millisecs &&
    lhs.ins_status == rhs.ins_status &&
    lhs.ins_position_type == rhs.ins_position_type &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.height == rhs.height &&
    lhs.north_vel == rhs.north_vel &&
    lhs.east_vel == rhs.east_vel &&
    lhs.up_vel == rhs.up_vel &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.heading == rhs.heading &&
    lhs.latitude_std_deviation == rhs.latitude_std_deviation &&
    lhs.longitude_std_deviation == rhs.longitude_std_deviation &&
    lhs.height_std_deviation == rhs.height_std_deviation &&
    lhs.north_vel_std_deviation == rhs.north_vel_std_deviation &&
    lhs.east_vel_std_deviation == rhs.east_vel_std_deviation &&
    lhs.up_vel_std_deviation == rhs.up_vel_std_deviation &&
    lhs.roll_std_deviation == rhs.roll_std_deviation &&
    lhs.pitch_std_deviation == rhs.pitch_std_deviation &&
    lhs.heading_std_deviation == rhs.heading_std_deviation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::openrtk_msg::openrtk_ins_<ContainerAllocator1> & lhs, const ::openrtk_msg::openrtk_ins_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace openrtk_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::openrtk_msg::openrtk_ins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openrtk_msg::openrtk_ins_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openrtk_msg::openrtk_ins_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openrtk_msg::openrtk_ins_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openrtk_msg::openrtk_ins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openrtk_msg::openrtk_ins_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openrtk_msg::openrtk_ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e86b3ea1a214ea8b04a5d2a2447027c";
  }

  static const char* value(const ::openrtk_msg::openrtk_ins_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e86b3ea1a214ea8ULL;
  static const uint64_t static_value2 = 0xb04a5d2a2447027cULL;
};

template<class ContainerAllocator>
struct DataType< ::openrtk_msg::openrtk_ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openrtk_msg/openrtk_ins";
  }

  static const char* value(const ::openrtk_msg::openrtk_ins_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openrtk_msg::openrtk_ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint16 gps_week\n"
"uint32 gps_millisecs\n"
"uint8 ins_status\n"
"uint8 ins_position_type\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 height\n"
"float64 north_vel\n"
"float64 east_vel\n"
"float64 up_vel\n"
"float64 roll\n"
"float64 pitch\n"
"float64 heading\n"
"float32 latitude_std_deviation\n"
"float32 longitude_std_deviation\n"
"float32 height_std_deviation\n"
"float32 north_vel_std_deviation\n"
"float32 east_vel_std_deviation\n"
"float32 up_vel_std_deviation\n"
"float32 roll_std_deviation\n"
"float32 pitch_std_deviation\n"
"float32 heading_std_deviation\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::openrtk_msg::openrtk_ins_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openrtk_msg::openrtk_ins_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gps_week);
      stream.next(m.gps_millisecs);
      stream.next(m.ins_status);
      stream.next(m.ins_position_type);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.height);
      stream.next(m.north_vel);
      stream.next(m.east_vel);
      stream.next(m.up_vel);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.heading);
      stream.next(m.latitude_std_deviation);
      stream.next(m.longitude_std_deviation);
      stream.next(m.height_std_deviation);
      stream.next(m.north_vel_std_deviation);
      stream.next(m.east_vel_std_deviation);
      stream.next(m.up_vel_std_deviation);
      stream.next(m.roll_std_deviation);
      stream.next(m.pitch_std_deviation);
      stream.next(m.heading_std_deviation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct openrtk_ins_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openrtk_msg::openrtk_ins_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openrtk_msg::openrtk_ins_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gps_week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gps_week);
    s << indent << "gps_millisecs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_millisecs);
    s << indent << "ins_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ins_status);
    s << indent << "ins_position_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ins_position_type);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "north_vel: ";
    Printer<double>::stream(s, indent + "  ", v.north_vel);
    s << indent << "east_vel: ";
    Printer<double>::stream(s, indent + "  ", v.east_vel);
    s << indent << "up_vel: ";
    Printer<double>::stream(s, indent + "  ", v.up_vel);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "latitude_std_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_std_deviation);
    s << indent << "longitude_std_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_std_deviation);
    s << indent << "height_std_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.height_std_deviation);
    s << indent << "north_vel_std_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.north_vel_std_deviation);
    s << indent << "east_vel_std_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.east_vel_std_deviation);
    s << indent << "up_vel_std_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.up_vel_std_deviation);
    s << indent << "roll_std_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.roll_std_deviation);
    s << indent << "pitch_std_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_std_deviation);
    s << indent << "heading_std_deviation: ";
    Printer<float>::stream(s, indent + "  ", v.heading_std_deviation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENRTK_MSG_MESSAGE_OPENRTK_INS_H
