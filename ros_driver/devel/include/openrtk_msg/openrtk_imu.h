// Generated by gencpp from file openrtk_msg/openrtk_imu.msg
// DO NOT EDIT!


#ifndef OPENRTK_MSG_MESSAGE_OPENRTK_IMU_H
#define OPENRTK_MSG_MESSAGE_OPENRTK_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace openrtk_msg
{
template <class ContainerAllocator>
struct openrtk_imu_
{
  typedef openrtk_imu_<ContainerAllocator> Type;

  openrtk_imu_()
    : header()
    , gps_week(0)
    , gps_millisecs(0)
    , x_acceleration(0.0)
    , y_acceleration(0.0)
    , z_acceleration(0.0)
    , x_gyro_rate(0.0)
    , y_gyro_rate(0.0)
    , z_gyro_rate(0.0)  {
    }
  openrtk_imu_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gps_week(0)
    , gps_millisecs(0)
    , x_acceleration(0.0)
    , y_acceleration(0.0)
    , z_acceleration(0.0)
    , x_gyro_rate(0.0)
    , y_gyro_rate(0.0)
    , z_gyro_rate(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _gps_week_type;
  _gps_week_type gps_week;

   typedef uint32_t _gps_millisecs_type;
  _gps_millisecs_type gps_millisecs;

   typedef float _x_acceleration_type;
  _x_acceleration_type x_acceleration;

   typedef float _y_acceleration_type;
  _y_acceleration_type y_acceleration;

   typedef float _z_acceleration_type;
  _z_acceleration_type z_acceleration;

   typedef float _x_gyro_rate_type;
  _x_gyro_rate_type x_gyro_rate;

   typedef float _y_gyro_rate_type;
  _y_gyro_rate_type y_gyro_rate;

   typedef float _z_gyro_rate_type;
  _z_gyro_rate_type z_gyro_rate;





  typedef boost::shared_ptr< ::openrtk_msg::openrtk_imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openrtk_msg::openrtk_imu_<ContainerAllocator> const> ConstPtr;

}; // struct openrtk_imu_

typedef ::openrtk_msg::openrtk_imu_<std::allocator<void> > openrtk_imu;

typedef boost::shared_ptr< ::openrtk_msg::openrtk_imu > openrtk_imuPtr;
typedef boost::shared_ptr< ::openrtk_msg::openrtk_imu const> openrtk_imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openrtk_msg::openrtk_imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openrtk_msg::openrtk_imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::openrtk_msg::openrtk_imu_<ContainerAllocator1> & lhs, const ::openrtk_msg::openrtk_imu_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gps_week == rhs.gps_week &&
    lhs.gps_millisecs == rhs.gps_millisecs &&
    lhs.x_acceleration == rhs.x_acceleration &&
    lhs.y_acceleration == rhs.y_acceleration &&
    lhs.z_acceleration == rhs.z_acceleration &&
    lhs.x_gyro_rate == rhs.x_gyro_rate &&
    lhs.y_gyro_rate == rhs.y_gyro_rate &&
    lhs.z_gyro_rate == rhs.z_gyro_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::openrtk_msg::openrtk_imu_<ContainerAllocator1> & lhs, const ::openrtk_msg::openrtk_imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace openrtk_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::openrtk_msg::openrtk_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openrtk_msg::openrtk_imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openrtk_msg::openrtk_imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openrtk_msg::openrtk_imu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openrtk_msg::openrtk_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openrtk_msg::openrtk_imu_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openrtk_msg::openrtk_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d40ff5f1b47965532ea9f61ecd997abb";
  }

  static const char* value(const ::openrtk_msg::openrtk_imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd40ff5f1b4796553ULL;
  static const uint64_t static_value2 = 0x2ea9f61ecd997abbULL;
};

template<class ContainerAllocator>
struct DataType< ::openrtk_msg::openrtk_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openrtk_msg/openrtk_imu";
  }

  static const char* value(const ::openrtk_msg::openrtk_imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openrtk_msg::openrtk_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint16 gps_week\n"
"uint32 gps_millisecs\n"
"float32 x_acceleration\n"
"float32 y_acceleration\n"
"float32 z_acceleration\n"
"float32 x_gyro_rate\n"
"float32 y_gyro_rate\n"
"float32 z_gyro_rate\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::openrtk_msg::openrtk_imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openrtk_msg::openrtk_imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gps_week);
      stream.next(m.gps_millisecs);
      stream.next(m.x_acceleration);
      stream.next(m.y_acceleration);
      stream.next(m.z_acceleration);
      stream.next(m.x_gyro_rate);
      stream.next(m.y_gyro_rate);
      stream.next(m.z_gyro_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct openrtk_imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openrtk_msg::openrtk_imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openrtk_msg::openrtk_imu_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gps_week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gps_week);
    s << indent << "gps_millisecs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_millisecs);
    s << indent << "x_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.x_acceleration);
    s << indent << "y_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.y_acceleration);
    s << indent << "z_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.z_acceleration);
    s << indent << "x_gyro_rate: ";
    Printer<float>::stream(s, indent + "  ", v.x_gyro_rate);
    s << indent << "y_gyro_rate: ";
    Printer<float>::stream(s, indent + "  ", v.y_gyro_rate);
    s << indent << "z_gyro_rate: ";
    Printer<float>::stream(s, indent + "  ", v.z_gyro_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENRTK_MSG_MESSAGE_OPENRTK_IMU_H
